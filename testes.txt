__________________________________ test_login __________________________________
client = <FlaskClient <Flask 'todo_project'>>
    def test_login(client):
        hashed_password = bcrypt.generate_password_hash('password').decode('utf-8')
        user = User(username='testuser', password=hashed_password)
        db.session.add(user)
        db.session.commit()
    
>       response = client.post('/login', data=dict(
            username='testuser',
            password='password'
        ), follow_redirects=True)
tests/test_routes.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1136: in post
    return self.open(*args, **kw)
/usr/local/lib/python3.11/site-packages/flask/testing.py:217: in open
    return super().open(
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1076: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1233: in run_wsgi_app
    app_rv = app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:1519: in full_dispatch_request
    rv = self.handle_user_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:1517: in full_dispatch_request
    rv = self.dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:1503: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
todo_project/todo_project/routes.py:46: in login
    login_user(user)
/usr/local/lib/python3.11/site-packages/flask_login/utils.py:170: in login_user
    session['_user_id'] = user_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = <NullSession {}>, args = ('_user_id', '1'), kwargs = {}
    def _fail(self, *args: t.Any, **kwargs: t.Any) -> "te.NoReturn":
>       raise RuntimeError(
            "The session is unavailable because no secret "
            "key was set.  Set the secret_key on the "
            "application to something unique and secret."
        )
E       RuntimeError: The session is unavailable because no secret key was set.  Set the secret_key on the application to something unique and secret.
/usr/local/lib/python3.11/site-packages/flask/sessions.py:97: RuntimeError




________________________________ test_register _________________________________
client = <FlaskClient <Flask 'todo_project'>>
    def test_register(client):
>       response = client.post('/register', data=dict(
            username='newuser',
            password='password',
            confirm_password='password'
        ), follow_redirects=True)
tests/test_routes.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1136: in post
    return self.open(*args, **kw)
/usr/local/lib/python3.11/site-packages/flask/testing.py:217: in open
    return super().open(
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1076: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1233: in run_wsgi_app
    app_rv = app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:1519: in full_dispatch_request
    rv = self.handle_user_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:1517: in full_dispatch_request
    rv = self.dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:1503: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
todo_project/todo_project/routes.py:73: in register
    flash(f'Account Created For {form.username.data}', 'success')
/usr/local/lib/python3.11/site-packages/flask/helpers.py:389: in flash
    session["_flashes"] = flashes
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = <NullSession {}>
args = ('_flashes', [('success', 'Account Created For newuser')]), kwargs = {}
    def _fail(self, *args: t.Any, **kwargs: t.Any) -> "te.NoReturn":
>       raise RuntimeError(
            "The session is unavailable because no secret "
            "key was set.  Set the secret_key on the "
            "application to something unique and secret."
        )
E       RuntimeError: The session is unavailable because no secret key was set.  Set the secret_key on the application to something unique and secret.
/usr/local/lib/python3.11/site-packages/flask/sessions.py:97: RuntimeError




________________________________ test_add_task _________________________________
client = <FlaskClient <Flask 'todo_project'>>
    def test_add_task(client):
        hashed_password = bcrypt.generate_password_hash('password').decode('utf-8')
        user = User(username='testuser', password=hashed_password)
        db.session.add(user)
        db.session.commit()
    
>       client.post('/login', data=dict(
            username='testuser',
            password='password'
        ), follow_redirects=True)
tests/test_routes.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1136: in post
    return self.open(*args, **kw)
/usr/local/lib/python3.11/site-packages/flask/testing.py:217: in open
    return super().open(
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1076: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1233: in run_wsgi_app
    app_rv = app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:1519: in full_dispatch_request
    rv = self.handle_user_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:1517: in full_dispatch_request
    rv = self.dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:1503: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
todo_project/todo_project/routes.py:46: in login
    login_user(user)
/usr/local/lib/python3.11/site-packages/flask_login/utils.py:170: in login_user
    session['_user_id'] = user_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = <NullSession {}>, args = ('_user_id', '1'), kwargs = {}
    def _fail(self, *args: t.Any, **kwargs: t.Any) -> "te.NoReturn":
>       raise RuntimeError(
            "The session is unavailable because no secret "
            "key was set.  Set the secret_key on the "
            "application to something unique and secret."
        )
E       RuntimeError: The session is unavailable because no secret key was set.  Set the secret_key on the application to something unique and secret.
/usr/local/lib/python3.11/site-packages/flask/sessions.py:97: RuntimeError





________________________________ test_all_tasks ________________________________
client = <FlaskClient <Flask 'todo_project'>>
    def test_all_tasks(client):
        hashed_password = bcrypt.generate_password_hash('password').decode('utf-8')
        user = User(username='testuser', password=hashed_password)
        db.session.add(user)
        db.session.commit()
    
>       client.post('/login', data=dict(
            username='testuser',
            password='password'
        ), follow_redirects=True)
tests/test_routes.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1136: in post
    return self.open(*args, **kw)
/usr/local/lib/python3.11/site-packages/flask/testing.py:217: in open
    return super().open(
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1076: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1233: in run_wsgi_app
    app_rv = app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:1519: in full_dispatch_request
    rv = self.handle_user_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:1517: in full_dispatch_request
    rv = self.dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:1503: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
todo_project/todo_project/routes.py:46: in login
    login_user(user)
/usr/local/lib/python3.11/site-packages/flask_login/utils.py:170: in login_user
    session['_user_id'] = user_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = <NullSession {}>, args = ('_user_id', '1'), kwargs = {}
    def _fail(self, *args: t.Any, **kwargs: t.Any) -> "te.NoReturn":
>       raise RuntimeError(
            "The session is unavailable because no secret "
            "key was set.  Set the secret_key on the "
            "application to something unique and secret."
        )
E       RuntimeError: The session is unavailable because no secret key was set.  Set the secret_key on the application to something unique and secret.
/usr/local/lib/python3.11/site-packages/flask/sessions.py:97: RuntimeError



_______________________________ test_update_task _______________________________
client = <FlaskClient <Flask 'todo_project'>>
    def test_update_task(client):
        hashed_password = bcrypt.generate_password_hash('password').decode('utf-8')
        user = User(username='testuser', password=hashed_password)
        db.session.add(user)
        db.session.commit()
    
>       client.post('/login', data=dict(
            username='testuser',
            password='password'
        ), follow_redirects=True)
tests/test_routes.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1136: in post
    return self.open(*args, **kw)
/usr/local/lib/python3.11/site-packages/flask/testing.py:217: in open
    return super().open(
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1076: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1233: in run_wsgi_app
    app_rv = app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:1519: in full_dispatch_request
    rv = self.handle_user_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:1517: in full_dispatch_request
    rv = self.dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:1503: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
todo_project/todo_project/routes.py:46: in login
    login_user(user)
/usr/local/lib/python3.11/site-packages/flask_login/utils.py:170: in login_user
    session['_user_id'] = user_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = <NullSession {}>, args = ('_user_id', '1'), kwargs = {}
    def _fail(self, *args: t.Any, **kwargs: t.Any) -> "te.NoReturn":
>       raise RuntimeError(
            "The session is unavailable because no secret "
            "key was set.  Set the secret_key on the "
            "application to something unique and secret."
        )
E       RuntimeError: The session is unavailable because no secret key was set.  Set the secret_key on the application to something unique and secret.
/usr/local/lib/python3.11/site-packages/flask/sessions.py:97: RuntimeError




_______________________________ test_delete_task _______________________________
client = <FlaskClient <Flask 'todo_project'>>
    def test_delete_task(client):
        hashed_password = bcrypt.generate_password_hash('password').decode('utf-8')
        user = User(username='testuser', password=hashed_password)
        db.session.add(user)
        db.session.commit()
    
>       client.post('/login', data=dict(
            username='testuser',
            password='password'
        ), follow_redirects=True)
tests/test_routes.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1136: in post
    return self.open(*args, **kw)
/usr/local/lib/python3.11/site-packages/flask/testing.py:217: in open
    return super().open(
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1076: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1233: in run_wsgi_app
    app_rv = app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:1519: in full_dispatch_request
    rv = self.handle_user_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:1517: in full_dispatch_request
    rv = self.dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:1503: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
todo_project/todo_project/routes.py:46: in login
    login_user(user)
/usr/local/lib/python3.11/site-packages/flask_login/utils.py:170: in login_user
    session['_user_id'] = user_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = <NullSession {}>, args = ('_user_id', '1'), kwargs = {}
    def _fail(self, *args: t.Any, **kwargs: t.Any) -> "te.NoReturn":
>       raise RuntimeError(
            "The session is unavailable because no secret "
            "key was set.  Set the secret_key on the "
            "application to something unique and secret."
        )
E       RuntimeError: The session is unavailable because no secret key was set.  Set the secret_key on the application to something unique and secret.
/usr/local/lib/python3.11/site-packages/flask/sessions.py:97: RuntimeError




_________________________________ test_account _________________________________
client = <FlaskClient <Flask 'todo_project'>>
    def test_account(client):
        hashed_password = bcrypt.generate_password_hash('password').decode('utf-8')
        user = User(username='testuser', password=hashed_password)
        db.session.add(user)
        db.session.commit()
    
>       client.post('/login', data=dict(
            username='testuser',
            password='password'
        ), follow_redirects=True)
tests/test_routes.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1136: in post
    return self.open(*args, **kw)
/usr/local/lib/python3.11/site-packages/flask/testing.py:217: in open
    return super().open(
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1076: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1233: in run_wsgi_app
    app_rv = app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:1519: in full_dispatch_request
    rv = self.handle_user_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:1517: in full_dispatch_request
    rv = self.dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:1503: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
todo_project/todo_project/routes.py:46: in login
    login_user(user)
/usr/local/lib/python3.11/site-packages/flask_login/utils.py:170: in login_user
    session['_user_id'] = user_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = <NullSession {}>, args = ('_user_id', '1'), kwargs = {}
    def _fail(self, *args: t.Any, **kwargs: t.Any) -> "te.NoReturn":
>       raise RuntimeError(
            "The session is unavailable because no secret "
            "key was set.  Set the secret_key on the "
            "application to something unique and secret."
        )
E       RuntimeError: The session is unavailable because no secret key was set.  Set the secret_key on the application to something unique and secret.
/usr/local/lib/python3.11/site-packages/flask/sessions.py:97: RuntimeError




_____________________________ test_change_password _____________________________
client = <FlaskClient <Flask 'todo_project'>>
    def test_change_password(client):
        hashed_password = bcrypt.generate_password_hash('password').decode('utf-8')
        user = User(username='testuser', password=hashed_password)
        db.session.add(user)
        db.session.commit()
    
>       client.post('/login', data=dict(
            username='testuser',
            password='password'
        ), follow_redirects=True)
tests/test_routes.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1136: in post
    return self.open(*args, **kw)
/usr/local/lib/python3.11/site-packages/flask/testing.py:217: in open
    return super().open(
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1076: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:945: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1233: in run_wsgi_app
    app_rv = app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:2091: in __call__
    return self.wsgi_app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:2076: in wsgi_app
    response = self.handle_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:2073: in wsgi_app
    response = self.full_dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:1519: in full_dispatch_request
    rv = self.handle_user_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:1517: in full_dispatch_request
    rv = self.dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:1503: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
todo_project/todo_project/routes.py:46: in login
    login_user(user)
/usr/local/lib/python3.11/site-packages/flask_login/utils.py:170: in login_user
    session['_user_id'] = user_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
self = <NullSession {}>, args = ('_user_id', '1'), kwargs = {}
    def _fail(self, *args: t.Any, **kwargs: t.Any) -> "te.NoReturn":
>       raise RuntimeError(
            "The session is unavailable because no secret "
            "key was set.  Set the secret_key on the "
            "application to something unique and secret."
        )
E       RuntimeError: The session is unavailable because no secret key was set.  Set the secret_key on the application to something unique and secret.
/usr/local/lib/python3.11/site-packages/flask/sessions.py:97: RuntimeError
